<?php

namespace HazAClass\System;

require_once dirname(__FILE__).'/../../../HazAClass/System/String.php';

/**
 * Test class for String.
 * Generated by PHPUnit on 2011-03-09 at 11:12:15.
 */
class StringTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var String
	 */
	protected $object;

	protected function setUp()
	{
		$this->object = new String();
	}

	protected function tearDown()
	{
		$this->object = null;
	}

	public function testInstance()
	{
		$this->assertInstanceOf(String::$classname, String::Instance());
		$this->assertEquals('abc', String::Instance('abc')->ToString());
	}

	public function testToString()
	{
		$this->assertSame('', $this->object->ToString());
	}

	public function testConcat()
	{
		$this->object->Concat('abc');
		$this->assertSame('abc', $this->object->ToString());
		$this->object->Concat('dfg');
		$this->assertSame('abcdfg', $this->object->ToString());
		$this->object->Concat('ijk', 'lmn');
		$this->assertSame('abcdfgijklmn', $this->object->ToString());
	}

	public function testSubString()
	{
		$this->object->Concat('abc');
		$this->object->SubString(0, 2);
		$this->assertSame('ab', $this->object->ToString());


		$this->object->Concat('abc');
		$this->object->SubString(2);
		$this->assertSame('abc', $this->object->ToString());
	}

	public function testLength()
	{
		$this->object->Concat('abc');
		$this->assertSame(3, $this->object->Length());
	}

	public function testCount()
	{
		$this->object->Concat('abc');
		$this->assertSame(3, count($this->object));
		$this->assertSame(3, $this->object->count());
	}

	public function testInString()
	{
		$this->object->Concat('abcdefg');
		$this->assertFalse($this->object->InString('xy'));
		$this->assertTrue($this->object->InString('ab'));
	}

	public function testContains()
	{
		$this->object->Concat('abcdefg');

		$this->assertTrue($this->object->Contains(array('c', 'f')));
		$this->assertFalse($this->object->Contains('cf'));
		$this->assertTrue($this->object->Contains('cd'));
	}

	public function testStartsWith()
	{
		$this->object->Concat('abcdefg');

		$this->assertTrue($this->object->StartsWith('abc'));
		$this->assertFalse($this->object->StartsWith('de'));
		$this->assertFalse($this->object->StartsWith('efg'));
	}

	public function testEndsWith()
	{
		$this->object->Concat('abcdefg');

		$this->assertFalse($this->object->EndsWith('abc'));
		$this->assertFalse($this->object->EndsWith('de'));
		$this->assertTrue($this->object->EndsWith('efg'));
	}

	public function testRemove()
	{
		$this->object->Concat('abcdefg');

		$this->object->Remove('de');
		$this->assertEquals('abcfg', (string) $this->object);
	}

	public function testRemoveEnd()
	{
		$this->object->Concat('abcdefg');

		$this->object->RemoveEnd('de');
		$this->assertEquals('abcdefg', (string) $this->object);

		$this->object->RemoveEnd('fg');
		$this->assertEquals('abcde', (string) $this->object);
	}

	public function testRemoveBegin()
	{
		$this->object->Concat('abcdefg');

		$this->object->RemoveBegin('de');
		$this->assertEquals('abcdefg', (string) $this->object);

		$this->object->RemoveBegin('ab');
		$this->assertEquals('cdefg', (string) $this->object);
	}

	public function testReplace()
	{
		$this->object->Concat('abcdefg');

		$this->object->Replace('de', 'xyz');

		$this->assertEquals('abcxyzfg', (string) $this->object);
	}

	public function testPosition()
	{
		$this->object->Concat('abcdefg');

		$this->assertEquals(2, $this->object->Position('c'));
		$this->assertEquals(null, $this->object->Position('z'));
	}

	public function testReversePosition()
	{
		$this->object->Concat('abcdefg');

		$this->assertEquals(5, $this->object->ReversePosition('f'));
		$this->assertEquals(null, $this->object->ReversePosition('z'));
	}

	public function testRepeat()
	{
		$this->object->Concat('a');

		$this->assertEquals('aaaaa', $this->object->Repeat(5));
	}

	public function testUUID()
	{
		$this->assertEquals(36, $this->object->UUID()->Length());
		$this->assertNotEquals((string) $this->object->UUID(), (string) $this->object->UUID());

		$this->object->UUID('pre', 'post');

		$this->assertTrue($this->object->StartsWith('pre'));
		$this->assertTrue($this->object->EndsWith('post'));
	}

	public function testTrim()
	{
		$this->object->Concat('    aaaaaaa     ');
		$this->object->Trim();
		$this->assertNotEquals('    aaaaaaa     ', $this->object->ToString());
		$this->assertEquals('aaaaaaa', $this->object->ToString());
	}

	public function testTrimLeft()
	{
		$this->object->Concat('    aaaaaaa     ');
		$this->object->TrimLeft();
		$this->assertNotEquals('    aaaaaaa     ', $this->object->ToString());
		$this->assertEquals('aaaaaaa     ', $this->object->ToString());
	}

	public function testTrimRight()
	{
		$this->object->Concat('    aaaaaaa     ');
		$this->object->TrimRight();
		$this->assertNotEquals('    aaaaaaa     ', $this->object->ToString());
		$this->assertEquals('    aaaaaaa', $this->object->ToString());
	}

	public function testLowerCase()
	{
		$this->object->Concat('aAaBaCa');
		$this->object->LowerCase();
		$this->assertNotEquals('aAaBaCa', $this->object->ToString());
		$this->assertEquals('aaabaca', $this->object->ToString());
	}

	public function testUpperCase()
	{
		$this->object->Concat('aAaBaCa');
		$this->object->UpperCase();
		$this->assertNotEquals('aAaBaCa', $this->object->ToString());
		$this->assertEquals('AAABACA', $this->object->ToString());
	}

	public function testUpperCaseFirst()
	{
		$this->object->Concat('aAaBaCa');
		$this->object->UpperCaseFirst();
		$this->assertNotEquals('aAaBaCa', $this->object->ToString());
		$this->assertEquals('AAaBaCa', $this->object->ToString());
	}

	public function testLowerCaseFirst()
	{
		$this->object->Concat('AAaBaCa');
		$this->object->LowerCaseFirst();
		$this->assertNotEquals('AAaBaCa', $this->object->ToString());
		$this->assertEquals('aAaBaCa', $this->object->ToString());
	}

	public function testCamelCase()
	{
		$this->object = String::CamelCase('hello','world');
		$this->assertNotEquals('hello world', $this->object->ToString());
		$this->assertEquals('HelloWorld', $this->object->ToString());
	}
}
?>
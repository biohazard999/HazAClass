<?php

namespace HazAClass\Evocator;

use HazAClass\System\Type;
use HazAClass\System\Object;
use HazAClass\Evocator\Domination\EvocatorDominator;

require_once dirname(__FILE__).'/../../../HazAClass/Evocator/Evocator.php';

/**
 * Test class for Evocator.
 * Generated by PHPUnit on 2011-03-20 at 07:50:57.
 */
class EvocatorTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var Evocator
	 */
	protected $evocator;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->evocator = new Evocator();
	}

	protected function tearDown()
	{
		$this->evocator = null;
	}

	// <editor-fold defaultstate="collapsed" desc=" Normal Summon ">
	public function testSummonNormalClassInterfaceNotImplemented()
	{
		$this->setExpectedException(LearnSpellException::$classname);
		$this->evocator->learnSpell(typeof(iTest::iTest), typeof(TestClassWithoutITest::$classname));
	}

	public function testSummonNormalClass()
	{
		$this->evocator->LearnSpell(typeof(iTest::iTest), typeof(NormalTestClass::$classname));
		$this->assertType(NormalTestClass::$classname, $this->evocator->Summon(typeof(iTest::iTest)));
	}

	public function testAutoSummonClass()
	{
		$this->assertType(NormalTestClass::$classname, $this->evocator->summon(typeof(NormalTestClass::$classname)));
	}

	public function testAutoSummonInterfaceClass()
	{
		$this->evocator->learnSpell(typeof(iTestDependency::iTestDependency), typeof(InterfaceTestDependency::$classname));

		$this->assertType(iTest::iTest, $this->evocator->Summon(typeof(InterfaceTestClass::$classname)));
	}

	public function testFailAutoSummonInterfaceClass()
	{
		$this->setExpectedException(SummonException::$classname);
		$this->evocator->Summon(typeof(InterfaceTestClass::$classname));
	}

	public function testAutoSummonClassTypeMapException()
	{
		$this->setExpectedException(AutoSummonException::$classname, AutoSummonException::INTERFACE_COULD_NOT_BE_AUTO_SUMMOND);
		$this->evocator->Summon(typeof(iTest::iTest));
	}

	/**
	 * @todo Implement testCreateNoviceEvocator().
	 */
	public function testCreateNoviceEvocator()
	{
		$this->assertType(Evocator::$classname, $this->evocator->CreateNoviceEvocator());
	}

	public function testScalarFailSummon()
	{
		$this->setExpectedException(SummonException::$classname);
		$this->evocator->Summon(typeof(ScalarParamTestClass::$classname));
	}

	public function testArrayFailSummon()
	{
		$this->setExpectedException(SummonException::$classname);
		$this->evocator->Summon(typeof(ArrayParamTestClass::$classname));
	}

	public function testArrayOptionalSuccessSummon()
	{
		$this->assertType(ArrayOptionalParamTestClass::$classname, $this->evocator->Summon(typeof(ArrayOptionalParamTestClass::$classname)));
	}

	public function testNullableInjectionSuccess()
	{
		$this->evocator->LearnSpell(typeof(iTestDependency::iTestDependency), typeof(InterfaceTestDependency::$classname));

		$testObject = $this->evocator->Summon(typeof(ClassNullableParamTestClass::$classname)); /* @var $testObject ClassNullableParamTestClass */

		$this->assertType(iTestDependency::iTestDependency, $testObject->getTestDependency());
	}

	public function testNullableInjectionNull()
	{
		$testObject = $this->evocator->Summon(typeof(ClassNullableParamTestClass::$classname)); /* @var $testObject ClassNullableParamTestClass */
		$this->assertEquals(null, $testObject->getTestDependency());
	}

	// </editor-fold>
	// <editor-fold defaultstate="collapsed" desc=" Posses Summon ">
	public function testPossessCreatureDefaultLifetimeManagerNoInterface()
	{
		$object = new TestClassWithoutITest;

		$this->evocator->PossessCreature(typeof(TestClassWithoutITest::$classname), $object);
		$this->assertEquals($object, $this->evocator->Summon(typeof(TestClassWithoutITest::$classname)));
	}

	public function testPossessCreatureDefaultLifetimeManager()
	{
		$object = $this->evocator->Summon(typeof(NormalTestClass::$classname));

		$this->evocator->PossessCreature(typeof(NormalTestClass::$classname), $object);
		$this->assertEquals($object, $this->evocator->Summon(typeof(NormalTestClass::$classname)));
	}

	public function testPossessCreatureDefaultLifetimeManagerNormalCreation()
	{
		$object = new NormalTestClass(new NormalTestDependency());

		$this->evocator->PossessCreature(typeof(NormalTestClass::$classname), $object);
		$this->assertEquals($object, $this->evocator->Summon(typeof(NormalTestClass::$classname)));
	}

	// </editor-fold>
	// <editor-fold defaultstate="collapsed" desc=" Method Summon">

	public function testPrivateMethodSummon()
	{
		$object = $this->evocator->Summon(typeof(PrivateMethodClass::$classname)) /* @var $object PrivateMethodClass */;
		$this->assertTrue($object->isSummoned());
	}

	public function testProtectedMethodSummon()
	{
		$object = $this->evocator->Summon(typeof(ProtectedMethodClass::$classname));
		$this->assertTrue($object->isSummoned());
	}

	public function testEmptyMethodSummon()
	{
		$this->assertTrue($this->evocator->Summon(typeof(EmptyMethodSummon::$classname))->isSummoned());
	}

	public function testNormalMethodSummon()
	{
		$this->assertType(NormalTestDependency::$classname, $this->evocator->Summon(typeof(NormalMethodSummon::$classname))->getDependency());
	}

	// </editor-fold>
	// <editor-fold defaultstate="collapsed" desc=" Property Summon ">
	public function testNormalPropertySummon()
	{
		$prop = $this->evocator->Summon(typeof(NormalPropertyClass::$classname)); /* @var $prop NormalPropertyClass */
		$this->assertType(NormalTestDependency::$classname, $prop->property);
	}

	public function testPrivatePropertySummon()
	{
		$prop = $this->evocator->Summon(typeof(PrivatePropertyClass::$classname));
		$this->assertType(NormalTestDependency::$classname, $prop->getProperty());
	}

	public function testProtectedPropertySummon()
	{
		$prop = $this->evocator->Summon(typeof(ProtectedPropertyClass::$classname));
		$this->assertType(NormalTestDependency::$classname, $prop->getProperty());
	}

	public function testOptionalFailPropertySummon()
	{
		$prop = $this->evocator->Summon(typeof(NormalOptionalPropertyClass::$classname));
		$this->assertEquals(null, $prop->property);
	}

	public function testOptionalSuccessPropertySummon()
	{
		$this->evocator->LearnSpell(typeof(iTestDependency::iTestDependency), typeof(InterfaceTestDependency::$classname));
		$prop = $this->evocator->Summon(typeof(NormalOptionalPropertyClass::$classname)); /* @var $prop iTestDependency */
		$this->assertType(iTestDependency::iTestDependency, $prop->property);
	}

	// </editor-fold>
	// <editor-fold defaultstate="collapsed" desc=" Forget Spells ">
	public function testForgetSpell()
	{
		$this->evocator->LearnSpell(typeof(iTest::iTest), typeof(NormalTestClass::$classname));
		$this->assertType(iTest::iTest, $this->evocator->Summon(typeof(iTest::iTest)));
		$this->evocator->ForgetSpell(typeof(iTest::iTest));
		$this->assertFalse($this->evocator->HasSpell(typeof(iTest::iTest)));
	}

	public function testForgetSpellNamed()
	{
		$this->evocator->LearnSpell(typeof(iTest::iTest), typeof(NormalTestClass::$classname), 'testname');
		$this->assertType(iTest::iTest, $this->evocator->Summon(typeof(iTest::iTest), 'testname'));
		$this->evocator->ForgetSpell(typeof(iTest::iTest), 'testname');
		$this->assertFalse($this->evocator->HasSpell(typeof(iTest::iTest), 'testname'));
	}

	// </editor-fold>
	// <editor-fold defaultstate="collapsed" desc=" Summon All ">
	public function testSummonAll()
	{
		$this->evocator->LearnSpell(typeof(iTestDependency::iTestDependency), typeof(InterfaceTestDependency::$classname));
		$this->evocator->LearnSpell(typeof(iTest::iTest),typeof( NormalTestClass::$classname), 'normal');
		$this->evocator->LearnSpell(typeof(iTest::iTest), typeof(InterfaceTestClass::$classname), 'interface');

		$creatures = $this->evocator->SummonAll(typeof(iTest::iTest));

		$this->assertEquals(2, $creatures->count());

		$this->assertType(NormalTestClass::$classname, $creatures['normal']);
		$this->assertType(InterfaceTestClass::$classname, $creatures['interface']);
	}

	public function testSummonAllWithUnnamed()
	{
		$this->evocator->LearnSpell(typeof(iTestDependency::iTestDependency), typeof(InterfaceTestDependency::$classname));
		$this->evocator->LearnSpell(typeof(iTest::iTest), typeof(MultipleTestClass::$classname));
		$this->evocator->LearnSpell(typeof(iTest::iTest), typeof(NormalTestClass::$classname), 'normal');
		$this->evocator->LearnSpell(typeof(iTest::iTest), typeof(InterfaceTestClass::$classname), 'interface');

		$creatures = $this->evocator->SummonAll(typeof(iTest::iTest));

		$this->assertEquals(2, $creatures->count());

		$this->assertType(NormalTestClass::$classname, $creatures['normal']);
		$this->assertType(InterfaceTestClass::$classname, $creatures['interface']);
	}

	// </editor-fold>
	// <editor-fold defaultstate="collapsed" desc=" Dominations ">
	public function testEvocatorLifeTimeManager()
	{
		$this->evocator->LearnSpell(typeof(iTest::iTest), typeof(NormalTestClass::$classname), null, new EvocatorDominator());

		$object = $this->evocator->Summon(typeof(iTest::iTest));

		$this->assertEquals($object, $this->evocator->Summon(typeof(iTest::iTest)));
	}

	public function testEvocatorLifeTimeManagerNamed()
	{
		$this->evocator->LearnSpell(typeof(iTest::iTest), typeof(NormalTestClass::$classname), 'name', new EvocatorDominator());

		$object = $this->evocator->Summon(typeof(iTest::iTest), 'name');

		$this->assertEquals($object, $this->evocator->Summon(typeof(iTest::iTest), 'name'));
	}

	// </editor-fold>
	// <editor-fold defaultstate="collapsed" desc=" Revive Creature">
	public function testDefaultRevived()
	{
		$obj = $this->evocator->Summon(typeof(DefaultRevivedClass::$classname)); /* @var $obj DefaultRevivedClass */
		$this->assertTrue($obj->isRevived());
	}

	public function testRevivedPrivateFail()
	{
		$obj = $this->evocator->Summon(typeof(PrivateRevivedClass::$classname));
		$this->assertTrue($obj->isRevived());
	}

	public function testRevivedProtectedFail()
	{
		$obj = $this->evocator->Summon(typeof(ProtectedRevivedClass::$classname));
		$this->assertTrue($obj->isRevived());
	}

	public function testCustomRevived()
	{
		$obj = $this->evocator->Summon(typeof(CustomRevivedClass::$classname)); /* @var $obj CustomRevivedClass */
		$this->assertTrue($obj->isRevived());
	}

	public function testCustomRevivedFail()
	{
		$this->setExpectedException(SummonException::$classname);
		$this->evocator->Summon(typeof(CustomRevivedFailClass::$classname));
	}

	// </editor-fold>
	// <editor-fold defaultstate="collapsed" desc=" Self Injection ">
	public function testSelfInjection()
	{
		$this->evocator->PossessCreature(typeof(Evocator::$classname), $this->evocator);
		$this->assertEquals($this->evocator, $this->evocator->Summon(typeof(SelfInjection::$classname))->getEvocator());
	}

	public function testSelfInjectionMethod()
	{
		$this->evocator->PossessCreature(typeof(Evocator::$classname), $this->evocator);
		$this->assertEquals($this->evocator, $this->evocator->Summon(typeof(SelfInjectionMethod::$classname))->getEvocator());
	}

	public function testSelfInjectionProperty()
	{
		$this->evocator->PossessCreature(typeof(Evocator::$classname), $this->evocator);
		$this->assertEquals($this->evocator, $this->evocator->Summon(typeof(SelfInjectionProperty::$classname))->getEvocator());
	}

	// </editor-fold>

	public function testEnchantingMethod()
	{
		$creature = new SelfInjectionMethod();
		$this->assertEquals(null, $creature->getEvocator());
		$this->evocator->PossessCreature(typeof(Evocator::$classname), $this->evocator);
		$this->evocator->Enchant($creature);
		$this->assertEquals($this->evocator, $creature->getEvocator());
	}

	public function testEnchantingProperties()
	{
		$creature = new SelfInjectionProperty();
		$this->assertEquals(null, $creature->getEvocator());
		$this->assertFalse($creature->isEnchanted());
		$this->evocator->PossessCreature(typeof(Evocator::$classname), $this->evocator);
		$this->evocator->Enchant($creature);
		$this->assertEquals($this->evocator, $creature->getEvocator());
		$this->assertTrue($creature->isEnchanted());
	}

	public function testFailEnchantingMethod()
	{
		$this->setExpectedException(SummonException::$classname, sprintf(SummonException::ENCHANT_METHOD_DOES_NOT_EXIST, 'enchanted', FailEnchantMethod::$classname));
		$creature = new FailEnchantMethod();

		$this->evocator->Enchant($creature);
	}
}

/**
 * @Enchanted
 */
class FailEnchantMethodPrivate extends Object
{

	public static $classname = __CLASS__;

	private function enchanted()
	{
		
	}

}

/**
 * @Enchanted
 */
class FailEnchantMethodProtected extends Object
{

	public static $classname = __CLASS__;

	private function enchanted()
	{
		
	}

}

/**
 * @Enchanted
 */
class FailEnchantMethod extends Object
{

	public static $classname = __CLASS__;

}

// <editor-fold defaultstate="collapsed" desc=" Test Classes ">
class SelfInjection extends Object
{

	public static $classname = __CLASS__;
	private $evocator;

	public function __construct(Evocator $evocator)
	{
		$this->evocator = $evocator;
	}

	public function getEvocator()
	{
		return $this->evocator;
	}

}

/**
 * @Enchanted
 */
class SelfInjectionMethod extends Object
{

	public static $classname = __CLASS__;
	private $evocator;
	private $isEnchanted = false;

	/**
	 * @SummonMethod
	 */
	public function method(Evocator $evocator)
	{
		$this->evocator = $evocator;
	}

	public function getEvocator()
	{
		return $this->evocator;
	}

	public function enchanted()
	{
		$this->isEnchanted = true;
	}

	public function isEnchanted()
	{
		return $this->isEnchanted;
	}

}

/**
 * @Enchanted
 */
class SelfInjectionProperty extends Object
{

	public static $classname = __CLASS__;
	/**
	 * @Summon(Evocator::$classname)
	 */
	public $evocator;
	private $isEnchanted = false;
	public function getEvocator()
	{
		return $this->evocator;
	}

	public function enchanted()
	{
		$this->isEnchanted = true;
	}

	public function isEnchanted()
	{
		return $this->isEnchanted;
	}

}

/**
 * @Revived('notExistingMethod')
 */
class CustomRevivedFailClass extends Object
{

	public static $classname = __CLASS__;

}

/**
 * @Revived
 */
class DefaultRevivedClass extends Object
{

	public static $classname = __CLASS__;
	private $revived = false;

	public function revived()
	{
		$this->revived = true;
	}

	public function isRevived()
	{
		return $this->revived;
	}

}

/**
 * @Revived('customRevived')
 */
class CustomRevivedClass extends Object
{

	public static $classname = __CLASS__;
	private $revived = false;

	public function customRevived()
	{
		$this->revived = true;
	}

	public function isRevived()
	{
		return $this->revived;
	}

}

/**
 * @Revived
 */
class PrivateRevivedClass extends Object
{

	public static $classname = __CLASS__;
	private $revived = false;

	private function revived()
	{
		$this->revived = true;
	}

	public function isRevived()
	{
		return $this->revived;
	}

}

/**
 * @Revived
 */
class ProtectedRevivedClass extends Object
{

	public static $classname = __CLASS__;
	private $revived = false;

	protected function revived()
	{
		$this->revived = true;
	}

	public function isRevived()
	{
		return $this->revived;
	}

}

class NormalPropertyClass extends Object
{

	public static $classname = __CLASS__;
	/**
	 * @Summon(NormalTestDependency::$classname)
	 * @var NormalTestDependency
	 */
	public $property;
}

class NormalOptionalPropertyClass extends Object
{

	public static $classname = __CLASS__;
	/**
	 * @Summon(iTestDependency::iTestDependency, Optional = true)
	 * @var iTestDependency
	 */
	public $property;
}

class ProtectedPropertyClass extends Object
{

	public static $classname = __CLASS__;
	/**
	 * @Summon(NormalTestDependency::$classname)
	 * @var NormalTestDependency
	 */
	protected $property;

	public function getProperty()
	{
		return $this->property;
	}

}

class PrivatePropertyClass extends Object
{

	public static $classname = __CLASS__;
	/**
	 * @Summon(NormalTestDependency::$classname)
	 * @var NormalTestDependency
	 */
	private $property;

	public function getProperty()
	{
		return $this->property;
	}

}

class PrivateMethodClass extends Object
{

	public static $classname = __CLASS__;
	private $summoned = false;

	/**
	 * @SummonMethod
	 */
	private function methodSummon()
	{
		$this->summoned = true;
	}

	public function isSummoned()
	{
		return $this->summoned;
	}

}

class ProtectedMethodClass extends Object
{

	public static $classname = __CLASS__;
	private $summoned = false;

	/**
	 * @SummonMethod
	 */
	protected function methodSummon()
	{
		$this->summoned = true;
	}

	public function isSummoned()
	{
		return $this->summoned;
	}

}

class MultipleTestClass extends Object implements iTest
{

	public static $classname = __CLASS__;

	public function getTestDependency()
	{
		
	}

}

class NormalMethodSummon extends Object
{

	public static $classname = __CLASS__;
	private $dependency;

	/**
	 * @SummonMethod
	 */
	public function summon(NormalTestDependency $dependency)
	{
		$this->dependency = $dependency;
	}

	public function getDependency()
	{
		return $this->dependency;
	}

}

class EmptyMethodSummon extends Object
{

	public static $classname = __CLASS__;
	private $summoned = false;

	/**
	 * @SummonMethod
	 */
	public function summon()
	{
		$this->summoned = true;
	}

	public function isSummoned()
	{
		return $this->summoned;
	}

}

class EmptyMethodNoSummon extends Object
{

	public static $classname = __CLASS__;
	private $summoned = false;

	/**
	 * @SummonMethod
	 */
	public function summon()
	{
		$this->summoned = true;
	}

	public function noSummon()
	{
		$this->summoned = false;
	}

	public function isSummoned()
	{
		return $this->summoned;
	}

}

interface iTest
{
	const iTest = __CLASS__;

	public function getTestDependency();
}

class TestClassWithoutITest extends Object
{

	public static $classname = __CLASS__;

}

interface iTestDependency
{
	const iTestDependency = __CLASS__;
}

class ScalarParamTestClass extends Object
{

	public static $classname = __CLASS__;

	public function __construct($testDependency)
	{
		
	}

}

class ArrayOptionalParamTestClass extends Object
{

	public static $classname = __CLASS__;

	public function __construct(array $testDependency = array())
	{
		
	}

}

class ClassNullableParamTestClass extends Object
{

	public static $classname = __CLASS__;
	private $testDependency;

	public function __construct(iTestDependency $testDependency = null)
	{
		$this->testDependency = $testDependency;
	}

	public function getTestDependency()
	{
		return $this->testDependency;
	}

}

class ArrayParamTestClass
{

	public static $classname = __CLASS__;

	public function __construct(array $testDependency)
	{
		
	}

}

class NormalTestClass extends Object implements iTest
{

	public static $classname = __CLASS__;
	private $testDependency;

	public function __construct(NormalTestDependency $testDependency)
	{
		$this->testDependency = $testDependency;
	}

	public function getTestDependency()
	{
		return $this->testDependency;
	}

}

class InterfaceTestClass extends Object implements iTest
{

	public static $classname = __CLASS__;
	private $testDependency;

	public function __construct(iTestDependency $testDependency)
	{
		$this->testDependency = $testDependency;
	}

	public function getTestDependency()
	{
		return $this->testDependency;
	}

}

class NormalTestDependency extends Object
{

	public static $classname = __CLASS__;

}

class InterfaceTestDependency extends Object implements iTestDependency
{

	public static $classname = __CLASS__;

}

// </editor-fold>
?>
